name: MLOps Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly training on Mondays at 2 AM

env:
  PYTHON_VERSION: '3.9'
  DOCKER_IMAGE: california-housing-predictor
  DOCKER_TAG: latest

jobs:
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Black (code formatting)
      run: |
        black --check --diff src/ tests/
        
    - name: Run Flake8 (linting)
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Run MyPy (type checking)
      run: |
        mypy src/ --ignore-missing-imports --disallow-untyped-defs

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create necessary directories
      run: |
        mkdir -p models logs data output
        
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  train:
    name: Model Training
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create necessary directories
      run: |
        mkdir -p models logs data output
        
    - name: Train model
      run: |
        python src/train.py
        
    - name: Quantize model
      run: |
        python src/quantize.py
        
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trained-models
        path: |
          models/
          logs/
        retention-days: 30

  build-and-test-docker:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: train
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: trained-models
        path: ./
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} .
        docker build -t ${{ env.DOCKER_IMAGE }}:dev --target development .
        
    - name: Test Docker image
      run: |
        docker run --rm ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} python -c "import sklearn; print('Docker image test passed')"
        
    - name: Run containerized tests
      run: |
        docker run --rm ${{ env.DOCKER_IMAGE }}:dev pytest tests/ -v
        
    - name: Test model prediction
      run: |
        docker run --rm ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} python src/predict.py

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test-docker
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, security-scan]
    if: github.ref == 'refs/heads/develop'
    timeout-minutes: 10
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply, docker push to registry, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, security-scan]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply, docker push to registry, etc.

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ Pipeline completed successfully!"
        # Add notification logic (Slack, email, etc.)
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Pipeline failed!"
        # Add notification logic (Slack, email, etc.)